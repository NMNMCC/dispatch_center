// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"

	"github.com/google/uuid"
	"rezics.com/task-queue/service/auth/ent/key"
	"rezics.com/task-queue/service/auth/ent/schema"
	"rezics.com/task-queue/service/auth/ent/user"
)

// The init function reads all schema descriptors with runtime code
// (default values, validators, hooks and policies) and stitches it
// to their package variables.
func init() {
	keyFields := schema.Key{}.Fields()
	_ = keyFields
	// keyDescPermissions is the schema descriptor for permissions field.
	keyDescPermissions := keyFields[2].Descriptor()
	// key.DefaultPermissions holds the default value on creation for the permissions field.
	key.DefaultPermissions = keyDescPermissions.Default.([]string)
	// key.PermissionsValidator is a validator for the "permissions" field. It is called by the builders before save.
	key.PermissionsValidator = keyDescPermissions.Validators[0].(func([]string) error)
	// keyDescCreatedAt is the schema descriptor for created_at field.
	keyDescCreatedAt := keyFields[3].Descriptor()
	// key.DefaultCreatedAt holds the default value on creation for the created_at field.
	key.DefaultCreatedAt = keyDescCreatedAt.Default.(func() time.Time)
	// keyDescID is the schema descriptor for id field.
	keyDescID := keyFields[0].Descriptor()
	// key.DefaultID holds the default value on creation for the id field.
	key.DefaultID = keyDescID.Default.(func() uuid.UUID)
	userFields := schema.User{}.Fields()
	_ = userFields
	// userDescEmail is the schema descriptor for email field.
	userDescEmail := userFields[1].Descriptor()
	// user.EmailValidator is a validator for the "email" field. It is called by the builders before save.
	user.EmailValidator = func() func(string) error {
		validators := userDescEmail.Validators
		fns := [...]func(string) error{
			validators[0].(func(string) error),
			validators[1].(func(string) error),
		}
		return func(email string) error {
			for _, fn := range fns {
				if err := fn(email); err != nil {
					return err
				}
			}
			return nil
		}
	}()
	// userDescPassword is the schema descriptor for password field.
	userDescPassword := userFields[2].Descriptor()
	// user.PasswordValidator is a validator for the "password" field. It is called by the builders before save.
	user.PasswordValidator = userDescPassword.Validators[0].(func(string) error)
	// userDescID is the schema descriptor for id field.
	userDescID := userFields[0].Descriptor()
	// user.DefaultID holds the default value on creation for the id field.
	user.DefaultID = userDescID.Default.(func() uuid.UUID)
}
