// Code generated by ent, DO NOT EDIT.

package worker

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
)

const (
	// Label holds the string label denoting the worker type in the database.
	Label = "worker"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldEndOfLife holds the string denoting the end_of_life field in the database.
	FieldEndOfLife = "end_of_life"
	// EdgeTask holds the string denoting the task edge name in mutations.
	EdgeTask = "task"
	// Table holds the table name of the worker in the database.
	Table = "workers"
	// TaskTable is the table that holds the task relation/edge.
	TaskTable = "workers"
	// TaskInverseTable is the table name for the Task entity.
	// It exists in this package in order to avoid circular dependency with the "task" package.
	TaskInverseTable = "tasks"
	// TaskColumn is the table column denoting the task relation/edge.
	TaskColumn = "task_worker"
)

// Columns holds all SQL columns for worker fields.
var Columns = []string{
	FieldID,
	FieldEndOfLife,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "workers"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"task_worker",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultID holds the default value on creation for the "id" field.
	DefaultID func() uuid.UUID
)

// OrderOption defines the ordering options for the Worker queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByEndOfLife orders the results by the end_of_life field.
func ByEndOfLife(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldEndOfLife, opts...).ToFunc()
}

// ByTaskField orders the results by task field.
func ByTaskField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTaskStep(), sql.OrderByField(field, opts...))
	}
}
func newTaskStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TaskInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, true, TaskTable, TaskColumn),
	)
}
