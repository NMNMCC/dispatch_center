// Code generated by ent, DO NOT EDIT.

package worker

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"rezics.com/task-queue/service/task/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Worker {
	return predicate.Worker(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Worker {
	return predicate.Worker(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Worker {
	return predicate.Worker(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Worker {
	return predicate.Worker(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Worker {
	return predicate.Worker(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Worker {
	return predicate.Worker(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Worker {
	return predicate.Worker(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Worker {
	return predicate.Worker(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Worker {
	return predicate.Worker(sql.FieldLTE(FieldID, id))
}

// EndOfLife applies equality check predicate on the "end_of_life" field. It's identical to EndOfLifeEQ.
func EndOfLife(v time.Time) predicate.Worker {
	return predicate.Worker(sql.FieldEQ(FieldEndOfLife, v))
}

// RegisteredAt applies equality check predicate on the "registered_at" field. It's identical to RegisteredAtEQ.
func RegisteredAt(v time.Time) predicate.Worker {
	return predicate.Worker(sql.FieldEQ(FieldRegisteredAt, v))
}

// EndOfLifeEQ applies the EQ predicate on the "end_of_life" field.
func EndOfLifeEQ(v time.Time) predicate.Worker {
	return predicate.Worker(sql.FieldEQ(FieldEndOfLife, v))
}

// EndOfLifeNEQ applies the NEQ predicate on the "end_of_life" field.
func EndOfLifeNEQ(v time.Time) predicate.Worker {
	return predicate.Worker(sql.FieldNEQ(FieldEndOfLife, v))
}

// EndOfLifeIn applies the In predicate on the "end_of_life" field.
func EndOfLifeIn(vs ...time.Time) predicate.Worker {
	return predicate.Worker(sql.FieldIn(FieldEndOfLife, vs...))
}

// EndOfLifeNotIn applies the NotIn predicate on the "end_of_life" field.
func EndOfLifeNotIn(vs ...time.Time) predicate.Worker {
	return predicate.Worker(sql.FieldNotIn(FieldEndOfLife, vs...))
}

// EndOfLifeGT applies the GT predicate on the "end_of_life" field.
func EndOfLifeGT(v time.Time) predicate.Worker {
	return predicate.Worker(sql.FieldGT(FieldEndOfLife, v))
}

// EndOfLifeGTE applies the GTE predicate on the "end_of_life" field.
func EndOfLifeGTE(v time.Time) predicate.Worker {
	return predicate.Worker(sql.FieldGTE(FieldEndOfLife, v))
}

// EndOfLifeLT applies the LT predicate on the "end_of_life" field.
func EndOfLifeLT(v time.Time) predicate.Worker {
	return predicate.Worker(sql.FieldLT(FieldEndOfLife, v))
}

// EndOfLifeLTE applies the LTE predicate on the "end_of_life" field.
func EndOfLifeLTE(v time.Time) predicate.Worker {
	return predicate.Worker(sql.FieldLTE(FieldEndOfLife, v))
}

// RegisteredAtEQ applies the EQ predicate on the "registered_at" field.
func RegisteredAtEQ(v time.Time) predicate.Worker {
	return predicate.Worker(sql.FieldEQ(FieldRegisteredAt, v))
}

// RegisteredAtNEQ applies the NEQ predicate on the "registered_at" field.
func RegisteredAtNEQ(v time.Time) predicate.Worker {
	return predicate.Worker(sql.FieldNEQ(FieldRegisteredAt, v))
}

// RegisteredAtIn applies the In predicate on the "registered_at" field.
func RegisteredAtIn(vs ...time.Time) predicate.Worker {
	return predicate.Worker(sql.FieldIn(FieldRegisteredAt, vs...))
}

// RegisteredAtNotIn applies the NotIn predicate on the "registered_at" field.
func RegisteredAtNotIn(vs ...time.Time) predicate.Worker {
	return predicate.Worker(sql.FieldNotIn(FieldRegisteredAt, vs...))
}

// RegisteredAtGT applies the GT predicate on the "registered_at" field.
func RegisteredAtGT(v time.Time) predicate.Worker {
	return predicate.Worker(sql.FieldGT(FieldRegisteredAt, v))
}

// RegisteredAtGTE applies the GTE predicate on the "registered_at" field.
func RegisteredAtGTE(v time.Time) predicate.Worker {
	return predicate.Worker(sql.FieldGTE(FieldRegisteredAt, v))
}

// RegisteredAtLT applies the LT predicate on the "registered_at" field.
func RegisteredAtLT(v time.Time) predicate.Worker {
	return predicate.Worker(sql.FieldLT(FieldRegisteredAt, v))
}

// RegisteredAtLTE applies the LTE predicate on the "registered_at" field.
func RegisteredAtLTE(v time.Time) predicate.Worker {
	return predicate.Worker(sql.FieldLTE(FieldRegisteredAt, v))
}

// HasTask applies the HasEdge predicate on the "task" edge.
func HasTask() predicate.Worker {
	return predicate.Worker(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, TaskTable, TaskColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTaskWith applies the HasEdge predicate on the "task" edge with a given conditions (other predicates).
func HasTaskWith(preds ...predicate.Task) predicate.Worker {
	return predicate.Worker(func(s *sql.Selector) {
		step := newTaskStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Worker) predicate.Worker {
	return predicate.Worker(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Worker) predicate.Worker {
	return predicate.Worker(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Worker) predicate.Worker {
	return predicate.Worker(sql.NotPredicates(p))
}
