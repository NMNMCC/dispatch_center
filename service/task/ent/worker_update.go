// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"rezics.com/task-queue/service/task/ent/predicate"
	"rezics.com/task-queue/service/task/ent/task"
	"rezics.com/task-queue/service/task/ent/worker"
)

// WorkerUpdate is the builder for updating Worker entities.
type WorkerUpdate struct {
	config
	hooks    []Hook
	mutation *WorkerMutation
}

// Where appends a list predicates to the WorkerUpdate builder.
func (_u *WorkerUpdate) Where(ps ...predicate.Worker) *WorkerUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetEndOfLife sets the "end_of_life" field.
func (_u *WorkerUpdate) SetEndOfLife(v time.Time) *WorkerUpdate {
	_u.mutation.SetEndOfLife(v)
	return _u
}

// SetNillableEndOfLife sets the "end_of_life" field if the given value is not nil.
func (_u *WorkerUpdate) SetNillableEndOfLife(v *time.Time) *WorkerUpdate {
	if v != nil {
		_u.SetEndOfLife(*v)
	}
	return _u
}

// SetTaskID sets the "task" edge to the Task entity by ID.
func (_u *WorkerUpdate) SetTaskID(id uuid.UUID) *WorkerUpdate {
	_u.mutation.SetTaskID(id)
	return _u
}

// SetNillableTaskID sets the "task" edge to the Task entity by ID if the given value is not nil.
func (_u *WorkerUpdate) SetNillableTaskID(id *uuid.UUID) *WorkerUpdate {
	if id != nil {
		_u = _u.SetTaskID(*id)
	}
	return _u
}

// SetTask sets the "task" edge to the Task entity.
func (_u *WorkerUpdate) SetTask(v *Task) *WorkerUpdate {
	return _u.SetTaskID(v.ID)
}

// Mutation returns the WorkerMutation object of the builder.
func (_u *WorkerUpdate) Mutation() *WorkerMutation {
	return _u.mutation
}

// ClearTask clears the "task" edge to the Task entity.
func (_u *WorkerUpdate) ClearTask() *WorkerUpdate {
	_u.mutation.ClearTask()
	return _u
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *WorkerUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *WorkerUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *WorkerUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *WorkerUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *WorkerUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	_spec := sqlgraph.NewUpdateSpec(worker.Table, worker.Columns, sqlgraph.NewFieldSpec(worker.FieldID, field.TypeUUID))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.EndOfLife(); ok {
		_spec.SetField(worker.FieldEndOfLife, field.TypeTime, value)
	}
	if _u.mutation.TaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   worker.TaskTable,
			Columns: []string{worker.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   worker.TaskTable,
			Columns: []string{worker.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{worker.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// WorkerUpdateOne is the builder for updating a single Worker entity.
type WorkerUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *WorkerMutation
}

// SetEndOfLife sets the "end_of_life" field.
func (_u *WorkerUpdateOne) SetEndOfLife(v time.Time) *WorkerUpdateOne {
	_u.mutation.SetEndOfLife(v)
	return _u
}

// SetNillableEndOfLife sets the "end_of_life" field if the given value is not nil.
func (_u *WorkerUpdateOne) SetNillableEndOfLife(v *time.Time) *WorkerUpdateOne {
	if v != nil {
		_u.SetEndOfLife(*v)
	}
	return _u
}

// SetTaskID sets the "task" edge to the Task entity by ID.
func (_u *WorkerUpdateOne) SetTaskID(id uuid.UUID) *WorkerUpdateOne {
	_u.mutation.SetTaskID(id)
	return _u
}

// SetNillableTaskID sets the "task" edge to the Task entity by ID if the given value is not nil.
func (_u *WorkerUpdateOne) SetNillableTaskID(id *uuid.UUID) *WorkerUpdateOne {
	if id != nil {
		_u = _u.SetTaskID(*id)
	}
	return _u
}

// SetTask sets the "task" edge to the Task entity.
func (_u *WorkerUpdateOne) SetTask(v *Task) *WorkerUpdateOne {
	return _u.SetTaskID(v.ID)
}

// Mutation returns the WorkerMutation object of the builder.
func (_u *WorkerUpdateOne) Mutation() *WorkerMutation {
	return _u.mutation
}

// ClearTask clears the "task" edge to the Task entity.
func (_u *WorkerUpdateOne) ClearTask() *WorkerUpdateOne {
	_u.mutation.ClearTask()
	return _u
}

// Where appends a list predicates to the WorkerUpdate builder.
func (_u *WorkerUpdateOne) Where(ps ...predicate.Worker) *WorkerUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *WorkerUpdateOne) Select(field string, fields ...string) *WorkerUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Worker entity.
func (_u *WorkerUpdateOne) Save(ctx context.Context) (*Worker, error) {
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *WorkerUpdateOne) SaveX(ctx context.Context) *Worker {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *WorkerUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *WorkerUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

func (_u *WorkerUpdateOne) sqlSave(ctx context.Context) (_node *Worker, err error) {
	_spec := sqlgraph.NewUpdateSpec(worker.Table, worker.Columns, sqlgraph.NewFieldSpec(worker.FieldID, field.TypeUUID))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Worker.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, worker.FieldID)
		for _, f := range fields {
			if !worker.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != worker.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.EndOfLife(); ok {
		_spec.SetField(worker.FieldEndOfLife, field.TypeTime, value)
	}
	if _u.mutation.TaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   worker.TaskTable,
			Columns: []string{worker.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: true,
			Table:   worker.TaskTable,
			Columns: []string{worker.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Worker{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{worker.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
